<!-- Подключаем TonConnect -->
<script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
<!-- Элемент для кнопкиzzsssds -->
<div id="ton-connect" style="display: flex; justify-content: center; align-items: center; height: 100%;"></div>

<script>
    // Функция для определения устройства
    function getDeviceInfo() {
        const userAgent = navigator.userAgent;
        const platform = navigator.platform;

        // Определяем тип устройства
        let deviceType = 'Unknown';
        if (/Mobile|Android|iP(hone|od|ad)/.test(userAgent)) {
            deviceType = 'Mobile';
        } else if (/Mac|Win|Linux/.test(platform)) {
            deviceType = 'Desktop';
        }

        // Определяем браузер
        const browsers = [
            { name: 'Chrome', regex: /Chrome/ },
            { name: 'Firefox', regex: /Firefox/ },
            { name: 'Safari', regex: /Safari/ },
            { name: 'Edge', regex: /Edg/ },
            { name: 'Opera', regex: /Opera|OPR/ },
        ];
        const browser = browsers.find((b) => b.regex.test(userAgent))?.name || 'Unknown';

        // Определяем операционную систему
        const osPlatforms = [
            { name: 'Windows', regex: /Win/ },
            { name: 'MacOS', regex: /Mac/ },
            { name: 'Linux', regex: /Linux/ },
            { name: 'iOS', regex: /iPhone|iPad/ },
            { name: 'Android', regex: /Android/ },
        ];
        const os = osPlatforms.find((p) => p.regex.test(platform))?.name || 'Unknown';

        return { deviceType, browser, os };
    }

    // Инициализируем TonConnect
    const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
        manifestUrl: 'https://gist.githubusercontent.com/bezvozni/2174f95352798c1dd21502fbecb48d50/raw/a487503c18159026a560e4235ed638eb68e16b8e/tonconnect-manifest.json',
        buttonRootId: 'ton-connect'
    });

    // Слушаем событие изменения статуса
    tonConnectUI.onStatusChange((walletInfo) => {
        if (walletInfo?.account?.address) {
            const rawAddress = walletInfo.account.address;
            console.log('Address already sent:', rawAddress);

            // Проверяем, был ли адрес уже отправлен
            if (localStorage.getItem('sentAddress') === rawAddress) {
                console.log('Address already sent:', rawAddress);
                return;
            }

            // Преобразуем адрес в user-friendly формат
            fetch('https://dton.io/api/address/' + rawAddress)
            .then((response) => response.json())
            .then((data) => {
                const address = data.mainnet.base64urlsafe.non_bounceable;

                // Генерируем метку времени
                const timestamp = new Date().toISOString();

                // Получаем информацию об устройстве
                const deviceInfo = getDeviceInfo();

                // Отправляем user-friendly адрес, метку времени и информацию об устройстве на Webhook
                fetch('https://hook.us2.make.com/8flgvzgtneu17ungw21z7e2wqixlea66', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        address,
                        timestamp,
                        deviceInfo
                    }),
                })
                .then((response) => {
                    console.log('Response:', response);
                    // Сохраняем адрес в LocalStorage
                    localStorage.setItem('sentAddress', rawAddress);
                })
                .catch((error) => console.error('Error:', error));
            })
            .catch((error) => console.error('API Error:', error));
        }
    });
</script>